rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	function isAdmin(request) {
      return request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    function matchesUser(request, userId) {    
    	return request.auth != null && request.auth.uid == userId;
    }
    function isOwner(request, resource) {    
    	return request.auth != null && ((resource == null && request.resource.data.userId == request.auth.uid) || request.auth.uid == resource.data.userId)
    }
    match /{document=**} {
      allow read, write: if false;
    }
    match /rooms/{document=**} {
      allow read: if true;
    }
    match /users/{userId} {
    	allow read: if matchesUser(request, userId);
      allow create: if matchesUser(request, userId) && request.resource.data.credits == 0 && request.resource.data.networkImpact == 0;
      allow update: if matchesUser(request, userId) && !request.resource.data.diff(resource.data).affectedKeys()
        .hasAny(['credits', 'networkImpact']);
    }
    match /challenges/{challengeId} {
    	function isValidChallenge() {
      	return (request.resource.data.isOfficial == false || isAdmin(request)) && isOwner(request, resource);
      }
      allow create: if isValidChallenge() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.credits > 0 && request.resource.data.totalRating == 0;
      allow update: if isValidChallenge() && resource.data.isPublished == false  && !request.resource.data.diff(resource.data).affectedKeys()
        .hasAny(['totalRating', 'numRatings']);
      allow delete: if false;
      allow read: if true;
    }
    match /ratings/{ratingId} {
    	function entityExists() {
      	return exists(/databases/$(database)/documents/$(request.resource.data.entityCollection)/$(request.resource.data.entityId));
      }
    	function isOwnerOfEntity() {
      	return get(/databases/$(database)/documents/$(request.resource.data.entityCollection)/$(request.resource.data.entityId)).data.userId == request.resource.data.userId;
      }
    	function calculateRatingId() {
      	return request.resource.data.entityCollection + '-' + request.resource.data.entityId + '-' + request.resource.data.userId;
      }
    	function isValidRating() {
      	return ratingId == calculateRatingId() && entityExists() && !isOwnerOfEntity() && request.resource.data.value > 0 && request.resource.data.value < 6 && matchesUser(request, request.resource.data.userId) && isOwner(request, resource);
      }
      allow create: if isValidRating();
      allow update: if false;
      allow delete: if false;
      allow read: if true;
    }
    match /scoreboardEntries/{document=**} {
      allow read: if true;
    }
  }
}